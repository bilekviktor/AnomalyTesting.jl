---
title: The Effect of the Loss Function on Quality of Anomaly Detection - Report 6.2.
author: Viktor BÃ­lek
date: 28.1.2021
---


# Introduction
Comparison of maximum-likelihood and calibrated loss function
for anomaly detection using SPTN model.

```julia; echo = false; results = "hidden"
using ToyProblems, DistributionsAD, SumProductTransform, Unitary, Flux, Setfield
using Distributions, Statistics, MLDataPattern, EvalMetrics
using Flux:throttle
using SumProductTransform: fit!, maptree
using ToyProblems: flower2
using SumProductTransform: ScaleShift, SVDDense
using DistributionsAD: TuringMvNormal
using DelimitedFiles

include("..//src//AnomalyTools.jl")

include("..//src//QuantileSAG.jl")

using Plots

function sptn(d, n, l)
	m = TransformationNode(ScaleShift(d),  TuringMvNormal(d,1f0))
	for i in 1:l
		m = SumNode([TransformationNode(SVDDense(d, identity, :butterfly), m)
					for i in 1:n])
	end
	return(m)
end
```
# Anomaly detection terms:
- fp - number of false positives etc.
- p - positives = tp + fn
- fpr - false positive rate = fp/p = fp/(tp + fn) = FALL OUT
- tpr - true positive rate = tp/p = 1 - fnr = SENSITIVITY, RECALL, HIT RATE
- tnr - true negative rate = tn/n = 1 - fpr = SPECIFITY, SELECTIVITY
- fnr - ....................................... = MISS RATE
- acc - ACCURACY = (tp + tn)/(p + n)
# Qunatile SAG method for optimalization

# Quantile percentage [0.05, 0.1]
```julia;
m1 = sptn(2, 9, 2)
x_train = flower2(10000, npetals=9)
x_val = flower2(1000, npetals=9)

data = QuantileData(x_train, (0.05, 0.1), 1000)

loss(x) = -mean(logpdf(m1, x))

ps = Flux.params(m1)

opt = ADAM(0.01)
qunatile_train!(loss, ps, data, 2500, m1, opt)

qval = lkl_quantile(m1, x_val, (0.05,0.1))
println("[0.05; 0.1] Q loss: ", loss(qval))
```
Heatmap:
```julia; echo = false
xx = reduce(hcat,[[v[1],v[2]] for v in Iterators.product(-10.0:0.1:10, -10.0:0.1:10)])
res = reshape(logpdf(m1, xx), 201, 201)
Plots.heatmap(exp.(res))
```
Generating anomalies and test set. FPR at 0.05
```julia; results="hidden"
x_test = flower2(100000, npetals=9)
x_anom = 10 .* (rand(2, 5000) .- 0.5)
fpr = 0.05
```
Evaluation
```julia;
targets1, scores1 = target_score(x_test, x_anom, m1, fpr)
binary_eval_report(targets1, scores1)
```
ROC plot
```julia; echo = false
roc_comparison(targets1, scores1, fpr)
```
